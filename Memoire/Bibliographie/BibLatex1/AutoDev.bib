
@article{ashraf_autonomous_2025,
	title = {Autonomous Agents in Software Engineering: A Multi-Agent {LLM} Approach},
	url = {https://www.researchgate.net/profile/Gregory-Talavera/publication/388834987_Autonomous_Agents_in_Software_Engineering_A_Multi-Agent_LLM_Approach/links/67a90cc4461fb56424d320f9/Autonomous-Agents-in-Software-Engineering-A-Multi-Agent-LLM-Approach.pdf},
	shorttitle = {Autonomous Agents in Software Engineering},
	abstract = {The integration of autonomous agents in software engineering has the potential to revolutionize
traditional development processes by automating complex tasks, enhancing collaboration, and
optimizing productivity. Large Language Models ({LLMs}) have emerged as powerful tools for
facilitating autonomous agent interactions, enabling software engineering workflows to be more
intelligent and adaptive. This paper explores a multi-agent {LLM} approach, where autonomous
agents perform various roles such as requirement analysis, code generation, testing, and
debugging. By leveraging natural language processing capabilities, these agents can communicate,
make decisions, and execute tasks with minimal human intervention. Experimental results
demonstrate that multi-agent {LLMs} can streamline software development, reduce human errors,
and accelerate project timelines. However, challenges related to model interpretability,
coordination complexities, and error handling remain critical concerns. This study discusses the
benefits, limitations, and future implications of integrating multi-agent {LLMs} in software
engineering, emphasizing the need for further research to enhance agent reliability, contextual
awareness, and ethical considerations. The findings suggest that a well-structured autonomous
agent system can significantly improve software engineering efficiency while complementing
human expertise in an agile development environment.},
	author = {Ashraf, Bilal and Talavera, Gregory},
	urldate = {2025-05-22},
	date = {2025},
}

@article{khan_ai-driven_2025,
	title = {{AI}-Driven Automation in Agile Development: Multi-Agent {LLMs} for Software Engineering},
	url = {https://www.researchgate.net/profile/Mendus-Daviglus/publication/388834977_AI-Driven_Automation_in_Agile_Development_Multi-Agent_LLMs_for_Software_Engineering/links/67a90985461fb56424d320a7/AI-Driven-Automation-in-Agile-Development-Multi-Agent-LLMs-for-Software-Engineering.pdf},
	shorttitle = {{AI}-Driven Automation in Agile Development},
	abstract = {The integration of {AI}-driven automation in agile software development has gained significant
momentum, with large language models ({LLMs}) playing a crucial role in streamlining workflows.
This study explores the potential of multi-agent {LLM} systems in enhancing various aspects of
software engineering, including code generation, bug detection, documentation, and project
management. By leveraging multiple specialized {AI} agents that collaborate dynamically, we
analyze how automation can improve development efficiency while maintaining code quality and
adaptability. Our research implements and evaluates a multi-agent framework, assessing its impact
on sprint planning, automated testing, and continuous integration pipelines. Experimental results
demonstrate that multi-agent {LLMs} can effectively reduce development time, enhance team
productivity, and provide real-time decision support, making them valuable assets in agile
environments. However, challenges such as model interpretability, error propagation, and
alignment with human developers remain critical concerns. This study highlights the benefits and
limitations of {AI}-driven automation in agile development and suggests future directions for
optimizing multi-agent {LLM} frameworks for software engineering.},
	author = {Khan, Salman and Daviglus, Mendus},
	urldate = {2025-05-22},
	date = {2025},
}

@article{zahid_multi-agent_2024,
	title = {Multi-Agent {AI} Collaboration: Advancing Software Engineering with Autonomous {LLMs}},
	url = {https://www.researchgate.net/profile/Ijaz-Hussain-23/publication/388835227_Multi-Agent_AI_Collaboration_Advancing_Software_Engineering_with_Autonomous_LLMs/links/67a8fabd645ef274a478ae49/Multi-Agent-AI-Collaboration-Advancing-Software-Engineering-with-Autonomous-LLMs.pdf},
	shorttitle = {Multi-Agent {AI} Collaboration},
	abstract = {The integration of multi-agent {AI} systems into software engineering is transforming traditional
development workflows. Large Language Models ({LLMs}), when used collaboratively, enhance
automation, streamline coding processes, and improve overall software quality. This paper
explores the role of autonomous {LLMs} in multi-agent {AI} collaboration, focusing on their impact
on code generation, debugging, project management, and software lifecycle optimization. Multiagent {AI} collaboration leverages distributed problem-solving, where multiple {LLMs} specialize in
different aspects of software development. By automating repetitive tasks, such as writing
boilerplate code and generating documentation, these {AI} agents reduce developer workload and
enhance productivity. Additionally, they assist in identifying code inefficiencies, detecting security
vulnerabilities, and refining algorithms with minimal human intervention. One of the key
challenges in {AI}-driven software engineering is ensuring seamless communication and
coordination among multiple agents. This paper examines techniques for optimizing multi-agent
interactions, including reinforcement learning, agent-based task delegation, and contextual
awareness. The research also highlights the ethical and practical considerations of {AI} in software
engineering. While multi-agent {LLMs} offer significant advantages, challenges such as {AI} bias,
hallucinations, and reliability must be addressed to ensure responsible {AI} adoption. By integrating
explainability frameworks and human oversight mechanisms, organizations can leverage {AI}
collaboration while maintaining accountability and transparency. This study concludes that multiagent {AI} systems are poised to revolutionize software engineering by enhancing automation,
reducing development time, and improving software robustness.},
	author = {Zahid, Ismail and Hussain, Ijaz},
	urldate = {2025-05-22},
	date = {2024},
}

@inproceedings{vallecillos_ruiz_agent-driven_2024,
	location = {Salerno Italy},
	title = {Agent-Driven Automatic Software Improvement},
	isbn = {979-8-4007-1701-7},
	url = {https://dl.acm.org/doi/10.1145/3661167.3661171},
	doi = {10.1145/3661167.3661171},
	abstract = {With software maintenance accounting for 50\% of the cost of developing software, enhancing code quality and reliability has become more critical than ever. In response to this challenge, this doctoral research proposal aims to explore innovative solutions by focusing on the deployment of agents powered by Large Language Models ({LLMs}) to perform software maintenance tasks. The iterative nature of agents, which allows for continuous learning and adaptation, can help surpass common challenges in code generation. One distinct challenge is the last-mile problems, errors at the final stage of producing functionally and contextually relevant code. Furthermore, this project aims to surpass the inherent limitations of current {LLMs} in source code through a collaborative framework where agents can correct and learn from each otherâ€™s errors. We aim to use the iterative feedback in these systems to further fine-tune the {LLMs} underlying the agents, becoming better aligned to the task of automated software improvement. Our main goal is to achieve a leap forward in the field of automatic software improvement by developing new tools and frameworks that can enhance the efficiency and reliability of software development.},
	eventtitle = {{EASE} 2024: 28th International Conference on Evaluation and Assessment in Software Engineering},
	pages = {470--475},
	booktitle = {Proceedings of the 28th International Conference on Evaluation and Assessment in Software Engineering},
	publisher = {{ACM}},
	author = {Vallecillos Ruiz, Fernando},
	urldate = {2025-05-22},
	date = {2024-06-18},
	langid = {english},
	file = {Available Version (via Google Scholar):/Users/ksoares/Zotero/storage/HG84XDYZ/Vallecillos Ruiz - 2024 - Agent-Driven Automatic Software Improvement.pdf:application/pdf},
}

@article{abbas_ai-driven_2024,
	title = {{AI}-Driven Agile Development: How Multi-Agent {LLMs} Optimize Engineering Workflows},
	url = {https://www.researchgate.net/profile/Abdul-Wahab-207/publication/388834911_AI-Driven_Agile_Development_How_Multi-Agent_LLMs_Optimize_Engineering_Workflows/links/67a8f79c645ef274a478ad7c/AI-Driven-Agile-Development-How-Multi-Agent-LLMs-Optimize-Engineering-Workflows.pdf},
	shorttitle = {{AI}-Driven Agile Development},
	abstract = {{AI}-driven Agile development is transforming engineering workflows by integrating multi-agent
Large Language Models ({LLMs}) to enhance collaboration, automation, and decision-making.
Traditional Agile methodologies rely on iterative development, rapid feedback, and continuous
improvement, but {AI}-powered multi-agent systems optimize these processes by automating
repetitive tasks, analyzing vast datasets, and providing intelligent recommendations. Multi-agent
{LLMs} function as autonomous entities capable of handling various aspects of software
development, including code generation, bug detection, requirement analysis, and project
management. By leveraging these {AI}-driven agents, teams can accelerate development cycles,
reduce human errors, and improve overall software quality. These models also facilitate real-time
collaboration by processing vast amounts of information, summarizing key insights, and
optimizing sprint planning. One of the critical advantages of {AI}-driven Agile development is
enhanced efficiency. Automated backlog prioritization, intelligent risk assessment, and real-time
code reviews allow engineering teams to focus on innovation rather than manual administrative
tasks. Multi-agent systems improve workflow coordination by distributing workloads dynamically
based on project demands and developer expertise, ensuring optimal resource allocation. Despite
these benefits, integrating {AI}-driven multi-agent {LLMs} into Agile development presents
challenges, including ethical considerations, data security risks, and maintaining human oversight.
Ensuring transparency, interpretability, and ethical {AI} usage is essential for successful
implementation. Moreover, {AI} models require continuous updates to adapt to evolving
development needs and maintain accuracy in recommendations.},
	author = {Abbas, Ghulam and Wahab, Abdul},
	urldate = {2025-05-22},
	date = {2024},
}

@misc{rasheed_codepori_2024,
	title = {{CodePori}: Large-Scale System for Autonomous Software Development Using Multi-Agent Technology},
	url = {http://arxiv.org/abs/2402.01411},
	doi = {10.48550/arXiv.2402.01411},
	shorttitle = {{CodePori}},
	abstract = {Context: Large Language Models ({LLMs}) and Generative Pre-trained Transformers ({GPTs}) have transformed the field of Software Engineering ({SE}). Existing {LLM}-based multi-agent models have successfully addressed basic dialogue tasks. However, the potential of {LLMs} for more challenging tasks, such as automated code generation for large and complex projects, has been investigated in only a few existing works. Objective: This paper aims to investigate the potential of {LLM}-based agents in the software industry, particularly in enhancing productivity and reducing time-to-market for complex software solutions. Our primary objective is to gain insights into how these agents can fundamentally transform the development of large-scale software. Methods: We introduce {CodePori}, a novel system designed to automate code generation for large and complex software projects based on functional and non-functional requirements defined by stakeholders. To assess the proposed system performance, we utilized the {HumanEval} benchmark and manually tested the {CodePori} model, providing 20 different project descriptions as input and then evaluated the code accuracy by manually executing the code. Results: {CodePori} is able to generate running code for large-scale projects, aligned with the typical software development process. The {HumanEval} benchmark results indicate that {CodePori} improves code accuracy by 89\%. A manual assessment conducted by the first author shows that the {CodePori} system achieved an accuracy rate of 85\%. Conclusion: Based on the results, our conclusion is that proposed system demonstrates the transformative potential of {LLM}-based agents in {SE}, highlighting their practical applications and opening new opportunities for broader adoption in both industry and academia. Our project is publicly available at https://github.com/{GPT}-Laboratory/{CodePori}.},
	number = {{arXiv}:2402.01411},
	publisher = {{arXiv}},
	author = {Rasheed, Zeeshan and Sami, Malik Abdul and Kemell, Kai-Kristian and Waseem, Muhammad and Saari, Mika and SystÃ¤, Kari and Abrahamsson, Pekka},
	urldate = {2025-05-22},
	date = {2024-09-17},
	eprinttype = {arxiv},
	eprint = {2402.01411 [cs]},
	keywords = {Computer Science - Software Engineering},
	file = {Preprint PDF:/Users/ksoares/Zotero/storage/W4WK242D/Rasheed et al. - 2024 - CodePori Large-Scale System for Autonomous Software Development Using Multi-Agent Technology.pdf:application/pdf;Snapshot:/Users/ksoares/Zotero/storage/PKLS5372/2402.html:text/html},
}
